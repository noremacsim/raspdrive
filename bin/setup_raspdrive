#!/bin/bash -eu

if [[ $EUID -ne 0 ]]
then
  echo "STOP: Run sudo -i."
  exit 1
fi

if [ "$(. /etc/os-release && echo "$VERSION_ID")" = "9" ]
then
  echo "STOP: Stretch-based install is no longer supported. Please flash the latest prebuilt."
  exit 1
fi

if [ "${FLOCKED:-}" != "$0" ]
then
  if FLOCKED="$0" flock -en -E 99 "$0" "$0" "$@" || case "$?" in
  99) echo already running
      exit 99
      ;;
  *)  exit $?
      ;;
  esac
  then
    # success
    exit 0
  fi
fi

function setup_progress () {
  local setup_logfile=/boot/raspdrive-headless-setup.log
  if [ -w $setup_logfile ]
  then
    echo "$( date ) : $*" >> "$setup_logfile"
  fi
  echo "$@"
}

function curlwrapper () {
  setup_progress "curl $*" > /dev/null
  local attempts=0
  while ! curl -s -S --stderr /tmp/curl.err --fail "$@"
  do
    attempts=$((attempts + 1))
    if [ "$attempts" -ge 20 ]
    then
      setup_progress "giving up after 20 tries"
      setup_progress "$(cat /tmp/curl.err)"
      exit 1
    fi
    setup_progress "'curl $*' failed, retrying" > /dev/null
    sntp -S time.google.com || true
    sleep 3
  done
}

function copy_script () {
  local remote_path="$1"
  local name="${1/*\/}"
  local local_path="$2"

  if [ -z ${SOURCE_DIR:+x} ]
  then
    if declare -F download_sources &> /dev/null
    then
      download_sources
    else
      export SOURCE_DIR=/tmp/sourcedir
      umount "$SOURCE_DIR" &> /dev/null || true
      rm -rf "$SOURCE_DIR"
      mkdir -p "$SOURCE_DIR"
      mount -t tmpfs none "$SOURCE_DIR"
      (
        cd "$SOURCE_DIR"
        curlwrapper -L "https://github.com/noremacsim/raspdrive/archive/main.tar.gz" | tar zxf - --strip-components=1
      )
    fi
  fi

  cp "${SOURCE_DIR}/$remote_path" "$local_path/$name"
  chmod +x "$local_path/$name"
  setup_progress "Downloaded $local_path/$name ..."
}

function safesource {
  cat <<EOF > /tmp/checksetupconf
#!/bin/bash -eu
source '$1' &> /tmp/checksetupconf.out
EOF
  chmod +x /tmp/checksetupconf
  if ! /tmp/checksetupconf
  then
    setup_progress "Error in $1:"
    setup_progress "$(cat /tmp/checksetupconf.out)"
    exit 1
  fi
  # shellcheck disable=SC1090
  source "$1"
}

THISDIR=$(dirname "$(readlink -f "$0")")
if [ ! -e "$THISDIR/envsetup.sh" ]
then
  # source the conf file directly to get REPO, BRANCH or download_sources
  # in case they're set
  safesource /root/raspdrive_setup_variables.conf
  REPO=${REPO:-noremacsim}
  BRANCH=${BRANCH:-main}
  copy_script boot/envsetup.sh "$THISDIR"
fi
# SC can't follow non-constant source
# shellcheck disable=SC1090
source "$THISDIR/envsetup.sh"

function dehumanize () {
  echo $(($(echo "$1" | sed 's/GB/G/;s/MB/M/;s/KB/K/;s/G/*1024M/;s/M/*1024K/;s/K/*1024/')))
}

REBOOT=false

# wpa_supplicant should have a country code. Use US as the default
# to avoid using the disallowed channels in the US.
WPA=/etc/wpa_supplicant/wpa_supplicant.conf
if [ -e "$WPA" ] && ! grep -q "country=" $WPA && grep -q "network=" $WPA
then
  setup_progress "adding country code to wpa_supplicant.conf"
  echo "country=GB" >> $WPA
  REBOOT=false
fi

BOOT_DISK=$(lsblk -dpno pkname "$(findmnt -D -no SOURCE --target /boot)")
declare -rx BOOT_DISK
BOOT_PARTITION_DEVICE=$(lsblk -dpno name "$(findmnt -D -no SOURCE --target /boot)")
readonly BOOT_PARTITION_DEVICE
readonly BOOT_DEVICE_PARTITION_PREFIX=${BOOT_PARTITION_DEVICE%?}
export BOOT_DEVICE_PARTITION_PREFIX
ROOT_PARTITION_DEVICE=$(lsblk -dpno name "$(findmnt -D -no SOURCE --target /)")
declare -rx ROOT_PARTITION_DEVICE
readonly ROOT_PART_NUM=${ROOT_PARTITION_DEVICE:0-1}
export ROOT_PART_NUM;
INCREASE_ROOT_SIZE=$(($(dehumanize "$INCREASE_ROOT_SIZE") / 512))

if [ "$INCREASE_ROOT_SIZE" != "0" ] && [ ! -e "${BOOT_DEVICE_PARTITION_PREFIX}$((ROOT_PART_NUM+1))" ]
then
  if [ ! -e /root/USB_ROOT_PARTITION_INCREASED ]
  then
    touch /root/USB_ROOT_PARTITION_INCREASED
    ROOTSTART=$(partx --show -g -o START "${ROOT_PARTITION_DEVICE}")
    ROOTSIZE=$(partx --show -g -o SECTORS "${ROOT_PARTITION_DEVICE}")
    ROOTSIZE=$((ROOTSIZE + INCREASE_ROOT_SIZE))
    echo "$ROOTSTART,$ROOTSIZE" | sfdisk --force "${BOOT_DISK}" -N "${ROOT_PART_NUM}"
    setup_progress "increased root partition size"
    REBOOT=false
  else
    setup_progress "increasing root filesystem size to match partition size"
    resize2fs "${ROOT_PARTITION_DEVICE}"
  fi
fi

#if [ "$REBOOT" = "true" ]
#then
#  if [ -t 0 ] && [ "${NO_REBOOT_PROMPT:-}" != "1" ]
#  then
#    setup_progress "please reboot for changes to take effect"
#    exit
#  else
#    setup_progress "rebooting for changes to take effect"
#    reboot
#    exit
#  fi
#fi

function headless_setup_mark_setup_success () {
  rm -f /boot/RASPDRIVE_SETUP_FAILED
  rm -f /boot/RASPDRIVE_SETUP_STARTED
  touch /boot/RASPDRIVE_SETUP_FINISHED
}

function flash () {
  local ON=0
  local OFF=1
  if isPi4
  then
    ON=1
    OFF=0
  fi
  echo none > "$STATUSLED/trigger"
  echo $OFF > "$STATUSLED/brightness"
  sleep 1
  for ((i=1; i<=$1; i++))
  do
    echo $ON > "$STATUSLED/brightness"
    sleep .2
    echo $OFF > "$STATUSLED/brightness"
    sleep .8
  done
}

function headless_setup_progress_flash () {
  if [ ! -t 0 ]
  then
    flash "$1"
  fi
}

function verify_configuration () {
  copy_script bin/verify-configuration.sh /tmp

  /tmp/verify-configuration.sh
}

function get_common_scripts () {
  setup_progress "Downloading common runtime scripts."

  copy_script bin/remountfs_rw /root/bin
#  copy_script bin/mount_usb.sh /root/bin
  copy_script bin/enable_gadget.sh /root/bin
  copy_script bin/disable_gadget.sh /root/bin
  copy_script bin/flush_system.sh /root/bin
#  copy_script boot/usb_service.py /root/bin
#  copy_script bin/configure_automount.sh /root/bin
  copy_script bin/mountoptsforimage /root/bin
  copy_script bin/mountimage /root/bin

  dos2unix /root/bin/disable_gadget.sh
  dos2unix /root/bin/enable_gadget.sh
#  dos2unix /root/bin/mount_usb.sh
  dos2unix /root/bin/remountfs_rw
#  dos2unix /root/bin/usb_service.py
  dos2unix /root/bin/flush_system.sh
#  dos2unix /root/bin/configure_automount.sh

  chmod +x /root/bin/disable_gadget.sh
  chmod +x /root/bin/enable_gadget.sh
#  chmod +x /root/bin/mount_usb.sh
  chmod +x /root/bin/remountfs_rw
#  chmod +x /root/bin/usb_service.py
  chmod +x /root/bin/flush_system.sh
#  chmod +x /root/bin/configure_automount.sh

  ln -sf /root/bin/mountimage /sbin/mount.raspdrive

}

# If only the dwc2 module is loaded at boot then the Pi will present
# itself as a non-responsive USB device until a gadget is created.
# When connected to a Windows host, this will show as a device with
# vendor ID 0 (which is invalid), and Windows might pop up an error
# message saying "USB device not recognized", while a connected Linux
# host will log messages like "device descriptor read/64, error -110"
# to the kernel log, and 'lsusb' might hang for over a minute or until
# a gadget is created.
# To work around this, make sure the g_ether module is loaded along
# with dwc2. The archiveloop script will then unload the g_ether
# module (the attached host will see no device at all at this point)
# before creating the mass storage gadget.
function fix_cmdline_txt_modules_load () {
  if [ ! -f "$CMDLINE_PATH" ]
  then
    setup_progress "cmdline.txt does not exist, skipping"
    return
  fi
  # Extract the modules-load portion of the command line.
  # Note that this not handle spaces in the argument.
  local curparam
  curparam=$(grep -P -o " modules.load=[^\s\$]*" "$CMDLINE_PATH" || true)
  if [[ "$curparam" == "" ]]
  then
    curparam="\$"
  elif [[ "$curparam" == *"dwc2"* ]] && [[ "$curparam" == *"g_ether"* ]]
  then
    setup_progress "cmdline.txt is up to date"
    return
  fi

  # replace the current parameter
  setup_progress "Updated cmdline.txt from:"
  setup_progress "$(cat "$CMDLINE_PATH")"
  sed -i "s/${curparam}/ modules-load=dwc2,g_ether/" "$CMDLINE_PATH"
  setup_progress "to:"
  setup_progress "$(cat "$CMDLINE_PATH")"
}

BACKINGFILES_MOUNTPOINT=/mnt/backingfiles
MUTABLE_MOUNTPOINT=/mnt/mutable

function update_backingfiles_fstab_entry () {
  local filename="$1"
  local mountpoint="$2"
  sed -i "\@^$filename .*@d" /etc/fstab
  if [ -e "$filename" ]
  then
    echo "$filename $mountpoint raspdrive noauto 0 0" >> /etc/fstab
    setup_progress "updated /etc/fstab for $mountpoint"
  fi
}


function create_usb_drive_and_mount_point () {

  if [ ! -e "$BACKINGFILES_MOUNTPOINT" ]
  then
    mkdir "$BACKINGFILES_MOUNTPOINT"
  fi

  if [ ! -e "$MUTABLE_MOUNTPOINT" ]
  then
    mkdir "$MUTABLE_MOUNTPOINT"
  fi

  copy_script bin/create-backingfiles-partition.sh /tmp
  /tmp/create-backingfiles-partition.sh "$BACKINGFILES_MOUNTPOINT" "$MUTABLE_MOUNTPOINT"

  if ! findmnt --mountpoint $BACKINGFILES_MOUNTPOINT > /dev/null
  then
    setup_progress "Mounting the partition for the backing files..."
    mount $BACKINGFILES_MOUNTPOINT
    setup_progress "Mounted the partition for the backing files."
  fi

  if ! findmnt --mountpoint $MUTABLE_MOUNTPOINT > /dev/null
  then
    setup_progress "Mounting the mutable partition..."
    mount $MUTABLE_MOUNTPOINT
    setup_progress "Mounted the mutable partition."
  fi

  if [ ! -e $BACKINGFILES_MOUNTPOINT/usbdata.bin ]
  then
    setup_progress "Creating backing disk files."
    copy_script bin/create-backingfiles.sh /tmp
    /tmp/create-backingfiles.sh "$BACKINGFILES_MOUNTPOINT"
  fi

  update_backingfiles_fstab_entry $BACKINGFILES_MOUNTPOINT/usbdata.bin /mnt/usbdata
  setup_progress "STOP: Couldn't check image"

  # Format the USB
  copy_script boot/formatUSB.sh /tmp
}

function configure_hostname () {
  local new_host_name="$USB_HOSTNAME"
  local old_host_name
  old_host_name=$(hostname)

  # Set the specified hostname if it differs from the current name
  if [ "$new_host_name" != "$old_host_name" ]
  then
    setup_progress "Configuring the hostname..."
    sed -i -e "s/$old_host_name/$new_host_name/g" /etc/hosts
    sed -i -e "s/$old_host_name/$new_host_name/g" /etc/hostname
    while ! hostnamectl set-hostname "$new_host_name"
    do
      setup_progress "hostnamectl failed, retrying"
      sleep 1
    done
    systemctl restart avahi-daemon || true
    setup_progress "Configured hostname: $(hostname)"
  fi
}

function update_package_index () {
  setup_progress "Updating package index files..."
  # the package index might be in a bad state if setup was previously
  # interrupted, so fix it up first
  dpkg --configure -a || true
  while ! (apt-get update || apt-get update --allow-releaseinfo-change)
  do
    setup_progress "Failed, retrying"
    sleep 2
  done
}

function upgrade_packages () {
  if [ "$UPGRADE_PACKAGES" = true ]
  then
    setup_progress "Upgrading installed packages..."
    # clean the cache to free up space, since especially
    # a kernel update requires quite a bit of temporary
    # extra space
    apt-get clean
    apt-get --assume-yes upgrade
  else
    setup_progress "Skipping package upgrade."
  fi
  # no real need to keep the cache around after setup
  apt-get clean
  fstrim / || true
}

function set_timezone () {
  if [ -n "${TIME_ZONE:+x}" ]
  then
    if [ -f "/usr/share/zoneinfo/$TIME_ZONE" ]
    then
      ln -sf "/usr/share/zoneinfo/$TIME_ZONE" /etc/localtime
    elif [ "$TIME_ZONE" = "auto" ]
    then
      if curlwrapper -o /root/bin/tzupdate.py https://raw.githubusercontent.com/marcone/tzupdate/develop/tzupdate.py
      then
        chmod +x /root/bin/tzupdate.py
        if ! tzout=$(/root/bin/tzupdate.py 2>&1)
        then
          setup_progress "auto timezone failed: $tzout"
        else
          setup_progress "$tzout"
        fi
      fi
    else
      setup_progress "invalid timezone: $TIME_ZONE"
    fi
  fi
}

# There's probably a better way of doing this.
# If not, there should be.
function get_usb_state {
  local current
  local last;
  current=$(cat /sys/class/udc/*/state)
  echo -n "Gadget state: $current"
  if [ "$current" = "configured" ]
  then
    echo
    return
  fi
  last=$(dmesg | grep 'g_mass_storage\|dwc2' | tail -1)
  if [ -z "$last" ]
  then
    echo ". No UMS/dwc2 messages in dmesg"
    return
  fi
  local usbstatetime
  usbstatetime=$(echo "$last" | tr -d '[]' | awk '{print $1}')
  now=$(awk '{print $1}' /proc/uptime)
  awk "BEGIN {printf \". %.1f seconds ago: \", $now-$usbstatetime}"
  case $last in
    # this message is now a debug log and doesn't show in normal builds
    *"Linux File-Backed Storage")
      echo "connected to host and host mounted drive(s)"
      ;;
    *"new device"*)
      ;&
    *"new address"*)
      echo "connected to host"
      ;;
    *"bound driver"*)
      echo "mass storage ready, but not connected to host (check cable)"
      ;;
    *)
      echo "unknown":
  esac
}

function cmd_install {
  copy_script "$1" /root/bin
  setup_progress "$1 installed in /root/bin/"
  exit
}

function cmd_selfupdate {
  echo "The 'selfupdate' command is no longer supported. Run '$0 upgrade' instead."
  exit 0
}

function cmd_upgrade {
  if [ ! -e /boot/RASPDRIVE_SETUP_FINISHED ]
  then
    echo "STOP: previous setup didn't finish, can't upgrade unfinished install"
    exit 1
  fi
  copy_script bin/setup_raspdrive /tmp &> /dev/null
  copy_script boot/envsetup.sh /tmp &> /dev/null
  exec bash -c "/tmp/setup_raspdrive upgrade_prepare && NO_REBOOT_PROMPT=1 /tmp/setup_raspdrive && /tmp/setup_raspdrive upgrade_finish"
}

function cmd_upgrade_prepare {
  setup_progress "preparing for full upgrade"
  (
    systemctl stop raspdrive || true
    service smbd stop || true
    service autofs stop || true
    umount /backingfiles || true
    umount /mnt/usbdata || true
    /root/bin/disable_gadget.sh || true
  ) &> /dev/null
}

#function cmd_upgrade_finish {
#  mv /tmp/setup_raspdrive /root/bin/setup_raspdrive
#  mv /tmp/envsetup.sh /root/bin/envsetup.sh
#  setup_progress "upgrade finished"
#  for i in {5..1}
#  do
#    echo -e -n "rebooting in $i seconds to apply changes, press ctrl-c to abort\r"
#    sleep 1
#  done
#  echo -e '\nRebooting'
#  reboot
#}

function checkfsrw() {
  local -r opts=$(findmnt -n -o options "$1")
  local -r rw=${opts:0:2}
  if [[ "$rw" != "$2" ]]
  then
    echo "$1 is $rw, should be $2"
  fi
}

function boot_is_not_on_root {
  [ "$(stat -c "%d" /)" -ne "$(stat -c "%d" /boot)" ]
}

export -f setup_progress

INSTALL_DIR=${INSTALL_DIR:-/root/bin}
if [ "$INSTALL_DIR" != "/root/bin" ]
then
  setup_progress "WARNING: 'INSTALL_DIR' setup variable no longer supported"
fi

BRANCHNAME="$BRANCH"

if [ -n "${1:+x}" ]
then
  command=cmd_$1
  if typeset -f "$command" > /dev/null
  then
    shift
    $command "$@"
    exit 0
  else
    setup_progress "unknown command: $1"
    exit 1
  fi
fi

# Update config.txt if needed
if [ -f "$PICONFIG_PATH" ]
then
  if ! grep -q 'dtoverlay=dwc2' "$PICONFIG_PATH"
  then
    echo -e "dtoverlay=dwc2\n" >> "$PICONFIG_PATH"
    setup_progress "reboot to apply dwc2 overlay change"
  fi
fi

configure_hostname

tmpdir=/tmp/$$
mkdir -p "$tmpdir"
copy_script bin/setup_raspdrive "$tmpdir"  &> /dev/null
if cmp -s "$tmpdir/setup_raspdrive" "$0"
then
  setup_progress "$0 is up to date"
else
  setup_progress "WARNING: $BRANCHNAME contains a different version of $0. It is recommended to run '$0 upgrade' to get the latest version."
fi

copy_script rc.local "$tmpdir" &> /dev/null
if cmp -s "$tmpdir/rc.local" /etc/rc.local
then
  setup_progress "rc.local is up to date"
else
  setup_progress "updating rc.local"
  mv "$tmpdir/rc.local" /etc/rc.local
  parent=$(ps -o ppid= $PPID)
  grandparent=$(ps -o ppid= "$((parent))" )
  caller=$(ps -o comm= "$((grandparent))")
  if [ "$caller" = "rc.local" ] && [ ! -t 0 ]
  then
    setup_progress "reboot to run updated rc.local"
    exit 0
  fi
fi

update_package_index

# set time zone so we get decent timestamps in the rest of the setup log
set_timezone

# Flash for stage 2 headless (verify requested configuration)
headless_setup_progress_flash 2

setup_progress "Verifying that the requested configuration is valid..."

verify_configuration

# Flash for Stage 3 headless (grab scripts)
headless_setup_progress_flash 3

mkdir -p /root/bin

get_common_scripts

pushd ~

fix_cmdline_txt_modules_load

# Flash for stage 4 headless (Create backing files)
headless_setup_progress_flash 4

setup_progress "Preparing USB"
create_usb_drive_and_mount_point

if [ "$SAMBA_ENABLED" = "true" ]
then
  export SAMBA_GUEST
  copy_script apps/configure_samba.sh /tmp
  /tmp/configure_samba.sh
fi

#copy_script bin/configure-automount.sh /tmp
#/tmp/configure-automount.sh

copy_script apps/configure_ssh.sh /tmp
/tmp/configure_ssh.sh

copy_script apps/configure_web.sh /tmp
/tmp/configure_web.sh

if [ -n "${AP_SSID:+x}" ]
then
  copy_script apps/configure_ap.sh /tmp
  /tmp/configure_ap.sh
fi

# source setup_raspdrive from .b./ashrc to set up completion
if ! grep -q envsetup.sh /root/.bashrc
then
  echo "source /root/bin/envsetup.sh" >> /root/.bashrc
fi
sed -i '/source \/root\/bin\/setup_raspdrive/d' /root/.bashrc

# UX courtesy reminders
if ! grep -q RASPDRIVE_TIP1 /root/.bashrc
then
  cat >> /root/.bashrc <<- EOC
	cat << RASPDRIVE_TIP1
	Run 'bin/setup_raspdrive upgrade' to update to the latest version of RASPDRIVE,

	RASPDRIVE_TIP1
	EOC
fi

DEFUSER=$(grep ":1000:1000:" /etc/passwd | awk -F : '{print $1}')
if [ -n "$DEFUSER" ]
then
  if ! grep -q RASPDRIVE_TIP1 "/home/$DEFUSER/.bashrc"
  then
    cat >> "/home/$DEFUSER/.bashrc" <<- EOC
	cat << RASPDRIVE_TIP1
	Run 'sudo -i' if you need to make changes.

	RASPDRIVE_TIP1
	EOC
  fi
fi

upgrade_packages

if [ -n "${INSTALL_USER_REQUESTED_PACKAGES:-}" ]
then
  setup_progress "Installing user requested packages: ${INSTALL_USER_REQUESTED_PACKAGES}"
  read -r -a EXTRA_PACKAGES <<< "${INSTALL_USER_REQUESTED_PACKAGES[@]}"
  DEBIAN_FRONTEND=noninteractive apt-get -y --force-yes install "${EXTRA_PACKAGES[@]}"
fi

headless_setup_mark_setup_success

# Flash for stage 5 headless (Mark success, FS readonly)
headless_setup_progress_flash 5

setup_progress "All done."

systemctl daemon-reload

if [ -t 0 ] && [ "${NO_REBOOT_PROMPT:-}" != "1" ]
then
  setup_progress '(reboot now for changes to take effect)'
fi
